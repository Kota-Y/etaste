openapi: 3.0.2
info:
  title: ETASTE API
  description: ETASTE API.
  version: 1.0.0
servers:
  - url: 'https://etaste.net/v1'
    description: Release server
  - url: 'https://staging.etaste.net/v1'
    description: Staging server
  - url: 'https://develop.etaste.net/v1'
    description: Develop server

paths:
  '/store/{storeId}':
    get:
      tags:
        - store
      summary: Get Store by ID.
      operationId: getStore
      parameters:
        - name: storeId
          in: path
          description: Store Id.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Store'
        default:
          description: Failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - store
      summary: Delete Store.
      operationId: deleteStore
      parameters:
        - name: storeId
          in: path
          description: Store Id.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Success Delete.
        default:
          description: Failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/food':
    get:
      tags:
        - food
      summary: Get Food.
      operationId: getAllFood
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Food'
        default:
          description: Failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - food
      summary: Create Food.
      operationId: createFood
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FoodCreate'
      responses:
        '201':
          description: Success Created.
        default:
          description: Failed Created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/food/{foodId}':
    get:
      tags:
        - food
      summary: Get Food by ID.
      operationId: getFood
      parameters:
        - name: foodId
          in: path
          description: Food Id.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FoodDetail'
        default:
          description: Failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - food
      summary: Delete Food.
      operationId: deleteFood
      parameters:
        - name: foodId
          in: path
          description: Food Id.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Success Delete.
        default:
          description: Failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/trade':
    post:
      tags:
        - trade
      summary: Create Trade.
      operationId: createTrade
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TradeCreate'
      responses:
        '201':
          description: Success Created.
        default:
          description: Failed Created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/trade/{userId}':
    get:
      tags:
        - trade
      summary: Get Trade by ID.
      operationId: getTrade
      parameters:
        - name: userId
          in: path
          description: User Id.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Trade'
        default:
          description: Failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/trade/complete/{tradeId}':
    patch:
      tags:
        - trade
      summary: Update Trade is Completed.
      operationId: updateTrade
      parameters:
        - name: tradeId
          in: path
          description: trade Id.
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TradeComplete'
      responses:
        '204':
          description: Success Created.
        default:
          description: Failed Created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/trade/store/{storeId}':
    get:
      tags:
        - trade
      summary: Get Trade for Store by ID.
      operationId: getTradeStore
      parameters:
        - name: storeId
          in: path
          description: Store Id.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TradeStore'
        default:
          description: Failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/favorite/{userId}':
    get:
      tags:
        - favorite
      summary: Get favorite by ID.
      operationId: getFavorite
      parameters:
        - name: userId
          in: path
          description: user Id.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Favorite'
        default:
          description: Failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/favorite':
    post:
      tags:
        - favorite
      summary: Create Favorite.
      operationId: createFavorite
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FavoriteCreate'
      responses:
        '201':
          description: Success Created.
        default:
          description: Failed Created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/favorite/{storeId}':
    delete:
      tags:
        - favorite
      summary: Delete Favorite.
      operationId: deleteFavorite
      parameters:
        - name: storeId
          in: path
          description: Store Id.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Success Delete.
        default:
          description: Failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/user':
    post:
      tags:
        - user
      summary: Create User.
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: Success Created.
        default:
          description: Failed Created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/user/login':
    post:
      tags:
        - user
      summary: Login User.
      operationId: loginUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        '200':
          description: Success Login.
        default:
          description: Failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/user/logout':
    get:
      tags:
        - user
      summary: Logout User.
      operationId: logoutUser
      responses:
        '200':
          description: Success Logout.
  '/user/{userId}':
    delete:
      tags:
        - user
      summary: Delete User.
      operationId: deleteUser
      parameters:
        - name: userId
          in: path
          description: User Id.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Success Delete.
        default:
          description: Failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    Store:
      type: object
      required:
        - id
        - name
        - image
        - openTime
        - closeTime
        - areaPref
        - areaCity
        - areaOther
        - zip
        - address
        - tel
        - holiday
        - parking
        - access
        - mapLatitude
        - mapLongitude
        - url
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        image:
          type: string
        openTime:
          type: string
        closeTime:
          type: string
        areaPref:
          type: string
        areaCity:
          type: string
        areaOther:
          type: string
        zip:
          type: string
        address:
          type: string
        tel:
          type: string
        holiday:
          type: string
        parking:
          type: string
        access:
          type: string
        mapLatitude:
          type: string
        mapLongitude:
          type: string
        url:
          type: string
      example:
        id: 1
        name: 滝川パン
        image: 'https://dl.dropboxusercontent.com/s/7vyyl6u3h66enwv/takigawa-pan.jpg'
        openTime: 0800
        closeTime: '2000'
        areaPref: '熊本県'
        areaCity: '熊本市中央区'
        areaOther: '下通'
        zip: 860-0801
        address: 熊本県熊本市中央区安政町2-34 HILLS KAGOMACHIビル1F
        tel: 096-342-4398
        holiday: 不定休(店休)
        parking: 駐車場 徒歩5分にあり(有料)
        access: 通町筋から徒歩10分
        mapLatitude: '32.815183'
        mapLongitude: '130.727428'
        url: 'http://takigawapan.jp/'
    Food:
      type: object
      required:
        - id
        - foodNum
        - foods
      properties:
        id:
          type: integer
          format: int64
        foodNum:
          type: integer
          format: int32
          description: Number of items in foods.
        foods:
          type: array
          items:
            $ref: '#/components/schemas/FoodItem'
      example:
        id: 111
        foodNum: 5
        foods:
          - id: 1
            name: あんぱん
            originalPrice: 600
            salePrice: 300
            startTime: '1300'
            endTime: '1545'
            image: 'https://dl.dropboxusercontent.com/s/fxss9wae0iq143q/an-pan.jpg'
            mapLatitude: '32.815183'
            mapLongitude: '130.727428'
          - id: 2
            name: サンドイッチ
            originalPrice: 500
            salePrice: 100
            startTime: '1415'
            endTime: '1645'
            image: 'https://dl.dropboxusercontent.com/s/u56mt4ts994ci4n/sandwich.jpg'
            mapLatitude: '32.814949'
            mapLongitude: '130.727842'
          - id: 3
            name: クリームパン
            originalPrice: 300
            salePrice: 100
            startTime: '1430'
            endTime: '1800'
            image: >-
              https://dl.dropboxusercontent.com/s/me9ch6kmvwevelk/curimu%3Dpan.jpg
            mapLatitude: '32.814419'
            mapLongitude: '130.726572'
          - id: 4
            name: 食パン
            originalPrice: 500
            salePrice: 100
            startTime: '1345'
            endTime: '1545'
            image: 'https://dl.dropboxusercontent.com/s/ytg953kgpnxwe90/shoku-pan.jpg'
            mapLatitude: '32.813823'
            mapLongitude: '130.724649'
          - id: 5
            name: フランスパン
            originalPrice: 500
            salePrice: 100
            startTime: '1315'
            endTime: '1600'
            image: >-
              https://dl.dropboxusercontent.com/s/a5myp1ouw89v4he/furansu-pan.jpg
            mapLatitude: '32.814625'
            mapLongitude: '130.723919'
    FoodItem:
      type: object
      required:
        - id
        - name
        - originalPrice
        - salePrice
        - startTime
        - endTime
        - allergy
        - whySale
        - image
        - mapLatitude
        - mapLongitude
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        originalPrice:
          type: integer
          format: int32
        salePrice:
          type: integer
          format: int32
        startTime:
          type: string
        endTime:
          type: string
        allergy:
          type: string
        whySale:
          type: string
        image:
          type: string
        mapLatitude:
          type: string
        mapLongitude:
          type: string
    FoodCreate:
      type: object
      required:
        - id
        - name
        - originalPrice
        - salePrice
        - startTime
        - endTime
        - amount
        - allergy
        - image
        - storeId
        - storeName
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        originalPrice:
          type: integer
          format: int32
        salePrice:
          type: integer
          format: int32
        startTime:
          type: string
        endTime:
          type: string
        amount:
          type: integer
          format: int32
        allergy:
          type: string
        image:
          type: string
        storeId:
          type: integer
          format: int64
        storeName:
          type: string
      example:
        id: 1
        name: あんぱん
        originalPrice: 600
        salePrice: 300
        startTime: '1300'
        endTime: '1545'
        amount: 3
        allergy: '[卵,乳,小麦]'
        image: 'https://dl.dropboxusercontent.com/s/fxss9wae0iq143q/an-pan.jpg'
        storeId: 2
        storeName: 滝川パン
    FoodDetail:
      type: object
      required:
        - id
        - isSaling
        - foodInfo
        - storeInfo
      properties:
        id:
          type: integer
          format: int64
        isSaling:
          type: string
        foodInfo:
          type: array
          items:
            $ref: '#/components/schemas/FoodItem'
        storeInfo:
          type: array
          items:
            $ref: '#/components/schemas/Store'
      example:
        id: 1
        isSaling: 'true'
        foodInfo:
          - id: 1
            name: あんぱん
            originalPrice: 600
            salePrice: 300
            startTime: '1300'
            endTime: '1545'
            allergy: '[卵,乳,小麦]'
            whySale: '本日はゲリラ豪雨により、お客さんがいらっしゃいいらっしゃいませんでした。このあんぱんは渾身のできです。'
            image: 'https://dl.dropboxusercontent.com/s/fxss9wae0iq143q/an-pan.jpg'
        storeInfo:
          - id: 1
            name: 滝川パン
            image: >-
              https://dl.dropboxusercontent.com/s/7vyyl6u3h66enwv/takigawa-pan.jpg
            openTime: 0800
            closeTime: '2000'
            zip: 860-0801
            address: 熊本県熊本市中央区安政町2-34 HILLS KAGOMACHIビル1F
            tel: 096-342-4398
            holiday: 不定休(店休)
            parking: 駐車場 徒歩5分にあり(有料)
            access: 通町筋から徒歩10分
            mapLatitude: '32.815183'
            mapLongitude: '130.727428'
            url: 'http://takigawapan.jp/'
    TradeCreate:
      type: object
      required:
        - id
        - userId
        - stodeId
        - foodId
        - amount
        - receiveTime
      properties:
        id:
          type: integer
          format: int64
        userId:
          type: integer
          format: int64
        stodeId:
          type: integer
          format: int64
        foodId:
          type: integer
          format: int64
        amount:
          type: integer
          format: int32
        receiveTime:
          type: string
      example:
        id: 111
        userId: 1
        stodeId: 2
        foodId: 3
        amount: 2
        receiveTime: '1830'
    Trade:
      type: object
      required:
        - id
        - tradeNum
        - trades
      properties:
        id:
          type: integer
          format: int64
        tradeNum:
          type: integer
          format: int32
          description: Number of items in trades.
        trades:
          type: array
          items:
            $ref: '#/components/schemas/TradeItem'
      example:
        id: 111
        tradeNum: 3
        trades:
          - id: 1
            foodId: 1
            storeId: 1
            foodName: 'あんぱん'
            storeName: '滝川パン'
            amount: 2
            totalPrice: 500
            recieveTime: '1545'
            isCompleted: 'true'
            foodImage: 'https://dl.dropboxusercontent.com/s/fxss9wae0iq143q/an-pan.jpg'
          - id: 2
            foodId: 2
            storeId: 2
            foodName: 'サンドイッチ'
            storeName: 'ロジパン'
            amount: 1
            totalPrice: 450
            recieveTime: '1745'
            isCompleted: 'false'
            foodImage: 'https://dl.dropboxusercontent.com/s/u56mt4ts994ci4n/sandwich.jpg'
          - id: 3
            foodId: 3
            storeId: 3
            foodName: 'クリームパン'
            storeName: '奇跡の手羽先'
            amount: 3
            totalPrice: 700
            recieveTime: '1900'
            isCompleted: 'false'
            foodImage: 'https://dl.dropboxusercontent.com/s/me9ch6kmvwevelk/curimu%3Dpan.jpg'
    TradeItem:
      type: object
      required:
        - id
        - foodId
        - stodeId
        - foodName
        - storeName
        - amount
        - totalPrice
        - recieveTime
        - isCompleted
        - foodImage
      properties:
        id:
          type: integer
          format: int64
        foodId:
          type: integer
          format: int64
        stodeId:
          type: integer
          format: int64
        foodName:
          type: string
        storeName:
          type: string
        amount:
          type: integer
          format: int32
        totalPrice:
          type: integer
          format: int32
        recieveTime:
          type: string
        isCompleted:
          type: string
        foodImage:
          type: string
    TradeComplete:
      type: object
      required:
        - userId
        - tradeId
      properties:
        userId:
          type: integer
          format: int64
        tradeId:
          type: integer
          format: int64
      example:
        userId: 1
        tradeId: 1
    TradeStore:
      type: object
      required:
        - id
        - foodName
        - amount
        - startTime
        - endTime
        - foodImage
        - storeTrades
      properties:
        id:
          type: integer
          format: int64
        foodName:
          type: string
        amount:
          type: integer
          format: int32
        startTime:
          type: string
        endTime:
          type: string
        foodImage:
          type: string
        tradeNum:
          type: integer
          format: int32
        storeTrades:
          type: array
          items:
            $ref: '#/components/schemas/TradeStoreItem'
      example:
        id: 111
        foodName: 'あんぱん'
        amount: 12
        startTime: '1700'
        endTime: '2000'
        foodImage: 'https://dl.dropboxusercontent.com/s/fxss9wae0iq143q/an-pan.jpg'
        tradeNum: 3
        storeTrades:
          - id: 1
            orderAmount: 2
            totalPrice: 300
            recieveTime: '1900'
            userName: 'kyamashita'
            isCompleted: 'false'
          - id: 2
            orderAmount: 3
            totalPrice: 450
            recieveTime: '1930'
            userName: 'tkawabata'
            isCompleted: 'true'
          - id: 3
            orderAmount: 4
            totalPrice: 600
            recieveTime: '1715'
            userName: 'eichikawa'
            isCompleted: 'false'
    TradeStoreItem:
      type: object
      required:
        - id
        - orderAmount
        - totalPrice
        - recieveTime
        - userName
        - isCompleted
      properties:
        id:
          type: integer
          format: int64
        orderAmount:
          type: integer
          format: int32
        totalPrice:
          type: integer
          format: int32
        recieveTime:
          type: string
        userName:
          type: string
        isCompleted:
          type: string
    Favorite:
      type: object
      required:
        - userId
        - favoriteNum
        - favoriteStores
      properties:
        userId:
          type: integer
          format: int64
        favoriteNum:
          type: integer
          format: int32
        favoriteStores:
          type: array
          items:
            $ref: '#/components/schemas/FavoriteStore'
      example:
        userId: 1
        favoriteNum: 3
        favoriteStores:
          - id: 1
            name: 滝川パン1
            image: >-
              https://dl.dropboxusercontent.com/s/7vyyl6u3h66enwv/takigawa-pan.jpg
          - id: 2
            name: 滝川パン2
            image: >-
              https://dl.dropboxusercontent.com/s/7vyyl6u3h66enwv/takigawa-pan.jpg
          - id: 3
            name: 滝川パン3
            image: >-
              https://dl.dropboxusercontent.com/s/7vyyl6u3h66enwv/takigawa-pan.jpg
          - id: 4
            name: 滝川パン4
            image: >-
              https://dl.dropboxusercontent.com/s/7vyyl6u3h66enwv/takigawa-pan.jpg
          - id: 5
            name: 滝川パン5
            image: >-
              https://dl.dropboxusercontent.com/s/7vyyl6u3h66enwv/takigawa-pan.jpg
    FavoriteStore:
      type: object
      required:
        - id
        - name
        - image
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        image:
          type: string
    FavoriteCreate:
      type: object
      required:
        - userId
        - storeId
        - storeName
      properties:
        userId:
          type: integer
          format: int64
        storeId:
          type: integer
          format: int64
        storeName:
          type: string
      example:
        userId: 1
        storeId: 2
        storeName: 滝川パン
    User:
      type: object
      required:
        - firstName
        - lastName
        - firstNameKana
        - lastNameKana
        - mail
        - password
      properties:
        firstName:
          type: string
        lastName:
          type: string
        firstNameKana:
          type: string
        lastNameKana:
          type: string
        mail:
          type: string
        password:
          type: string
      example:
        firstName: '山下'
        lastName: '昂太'
        firstNameKana: 'ヤマシタ'
        lastNameKana: 'コウタ'
        mail: 'etaste.food@gmail.com'
        password: 'KBa45fdg'
    UserLogin:
      type: object
      required:
        - mail
        - password
      properties:
        mail:
          type: string
        password:
          type: string
      example:
        mail: 'etaste.food@gmail.com'
        password: 'KBa45fdg'
    Error:
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
      example:
        code: 1
        message: Default Error.
tags:
  - name: store
    description: About Store.
  - name: food
    description: About Food.
  - name: trade
    description: About Trade.
  - name: favorite
    description: About favorite.
  - name: user
    description: About User.
